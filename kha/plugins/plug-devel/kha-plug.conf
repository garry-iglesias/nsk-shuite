###############################################################################
# KHA Plugin: 'plug-devel'
# Author: Garry Iglesias <garry.iglesias@gmail.com>
###############################################################################
#
# This BASH script will be sourced on KHA initialization if his plugin is
# activated.
#
###############################################################################
#
# The main flow of this script is sourced on KHA's initialization, so the
# only imperative code should do initialization, if required.
#
# Generally, a plugin consist more of a library of functions, to enhance
# the KHA features enriching the KHA's environment.
#
# It is easy to expose a new Command Line "Kommand" simply prefixing your
# function with 'kmd-'.
#
###############################################################################
# Developer notes:
#
# Performances / Resources:
#  - it is better not to "bloat" environment when not needed. So if you provide
# a large function library, provide "lazy loading" function to source external
# files "on demand".
#
###############################################################################

###############################################################################
# KHA plug-devel Kontext:
###############################################################################

#######################################
plgDev-ctx-start () {
    KHA_PLGDEV_TAB="${KHA_ETC_PATH}/plgdevtab"
}

#######################################
plgDev-ctx-end () {
    unset \
        KHA_PLGDEV_TAB
}

#######################################
plgDev-ctx-load () {
    plgDev-ctx-start

    if ! [[ -f "$KHA_PLGDEV_TAB" ]] ; then
        cat >"$KHA_PLGDEV_TAB" <<PLUGDEV_DEFAULT_TAB
# KHA Plugin Development tab.
# Format:
# <Plugin Name>|<Publish Path>|
#
# <Publish Path> may contain variable references.
#
# ie:
# sample-plug|\$HOME/devel/dev-repo/plugins/sample-plug|
#
PLUGDEV_DEFAULT_TAB
    fi
}

#######################################
plgDev-exeK () {
    local cmd="$1" retVal=0 ; shift
    plgDev-ctx-load
    "$cmd" "$@" || retVal=$?
    plgDev-ctx-end
    return ${retVal}
}

###############################################################################
# KHA plug-devel plugin library:
###############################################################################

#######################################
plgDev-tab () { <"$KHA_PLGDEV_TAB" kha-killKomments ; }

#######################################
plgDev-publishPlug () {
    # Load plugin name:
    local plugName="$1"

    kha-verbose-echo " * Publishing plugin: '${plugName}'..."

    # Load plugin tab's record:
    local plugRecord plugPubPath valPubPath
    plugRecord="$( plgDev-tab | grep "^${plugName}|" )"
    plugPubPath="$(echo "$plugRecord" | cut -d\| -f2 )"
    valPubPath="$( eval echo "$plugPubPath" )"

    kha-debug-echo ">RECORD: '${plugRecord}'"
    kha-debug-echo ">PUBPATH: '${valPubPath}'"

    # Now generate publishing's data:
    local plugSrc="${KHA_PLG_PATH}/${plugName}"
    local plugTgt="${valPubPath}/${plugName}"

    # And publish it:
    kha-ensureDir "${plugTgt}"
    cp -r "${plugSrc}"/* "${plugTgt}"
}

#######################################
plgDev-publish () {
    # Prepare publishing:
    local pubList curArg
    pubList="$(kha-mktemp)"
    # Parse arguments for plugins to publish:
    [[ -n "${1:-}" ]] || kha-error "Usage: publish [--all | plugin-name-1 [plugin-name-2 [...]]]"
    while [[ -n "${1:-}" ]] ; do
        curArg="$1" ; shift
        case "${curArg}" in
          '--all') # Request all plugins:
                kha-verbose-echo " * All developped plugins publishing request."
                plgDev-tab | cut -d\| -f1 >>"$pubList"
                ;;
            *) # So is this really a plugin ?
                kha-plug-exists "${curArg}" \
                    || kha-error "Plugin '${curArg}' is unknown !"
                # Ok so take him:
                echo "$curArg" >>"$pubList"
                ;;
        esac
    done
    # Clean the list:
    <"$pubList" sort -u | kha-source-redirect "$pubList"
    # Now publish the plugins:
    local eachPlug
    while IFS= read eachPlug ; do
        plgDev-publishPlug "${eachPlug}"
    done <"$pubList"
}

###############################################################################
# KHA plug-devel Command Line Interface:
###############################################################################
# Kommands accessible directly as KHA's kommands on the CLI.

#######################################
kmd-plugd-edit-tab () {
    plgDev-ctx-load
    kha-edit "$KHA_PLGDEV_TAB"
    plgDev-ctx-end
}

#######################################
kmd-plugd-publish () {
    ktx-exeK plgDev-exeK plgDev-publish "$@"
}

#######################################
#foo () {
#    local curArg
#    while [[ -n "${1:-}" ]] ; do
#        curArg="$1"
#        case "${curArg}" in
#            *) kha-error "Invalid argument '${curArg}' !" ;;
#        esac
#    done
#}

###############################################################################
# KHA plug-devel plugin initialization:
###############################################################################

